<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:u="http://www.adroitlogic.org/ultraesb"
       xmlns:s="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.adroitlogic.org/ultraesb http://schemas.ultraesb.org/ultraesb-2.0.xsd">

    <bean id="ultra-config" class="org.adroitlogic.ultraesb.core.ConfigurationImpl">
        <property name="environment">
            <bean class="org.adroitlogic.ultraesb.api.Environment">
                <constructor-arg name="name" value="sample"/>
            </bean>
        </property>
    </bean>

    <bean id="fileCache" class="org.adroitlogic.ultraesb.core.PooledMessageFileCache">
        <constructor-arg type="int" value="10"/>
    </bean>

    <bean id="http-8280" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8280"/>
    </bean>
    <bean id="http-8281" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8281"/>
    </bean>

    <bean id="http-sender" class="org.adroitlogic.ultraesb.transport.http.HttpNIOSender">
        <constructor-arg ref="fileCache"/>
    </bean>

    <!--Refer to the unit test WebProxyTest for more details about this sample and a unit test for it-->

    <!--A Proxy service that can act as a web proxy. Accepts any request over the transport http-8280 as the 'url'
    property specifies '*'. This property is a regular expression, and can filter requests that the service is
    expected to handle. Defaults to /<defaultContext>/<proxyId> e.g. /service/web-proxy-1 etc

    The request is forwarded to the 'prefix' endpoint http://localhost:9000
    Hence a request to /service/web-proxy-1/something?a=1&b=2 will be sent to http://localhost:9000/something?a=1&b=2-->
    <u:proxy id="web-proxy-1">
        <u:transport id="http-8280">
            <u:property name="ultra.transport.url" value="*"/>
        </u:transport>
        <u:target>
            <u:inDestination>
                <u:address type="prefix">http://localhost:9000</u:address>
                <u:property name="ultra.endpoint.switch_location_headers_to" value="http://localhost:8280/"/>
            </u:inDestination>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--A proxy that accepts requests to context path /vpath and forwards them to the prefix address
    http://localhost:9000/service/HtmlServlet after transforming query parameters

    Thus a request to /vpath?x=1&y=2&z=3 will be sent to http://localhost:9000/service/HtmlServlet?a=1&b=2&c=3-->
    <u:proxy id="web-proxy-2">
        <u:transport id="http-8281">
            <u:property name="ultra.transport.url" value="/vpath"/>
            <u:property name="ultra.http.strip_url_prefix" value="/vpath"/>
        </u:transport>
        <u:target>
            <u:inSequence>
                <u:script ><![CDATA[
                    var map = msg.getMessageProperty("ultra.http.query_param_map");
                    var val = map.remove('x');
                    if (val != null) map.put('a', val);
                    val = map.remove('y');
                    if (val != null) map.put('b', val);
                    val = map.remove('z');
                    if (val != null) map.put('c', val);
                ]]></u:script>
            </u:inSequence>
            <u:inDestination>
                <u:address type="prefix">http://localhost:9000/service/HtmlServlet</u:address>
                <u:property name="ultra.endpoint.switch_location_headers_to" value="http://localhost:8280/vpath"/>
            </u:inDestination>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--The same service implemented using Groovy
    When using Groovy 1.7.5 you will need to place the following JAR files into lib/custom directory.
    You may need to add additional JARs if your code requires any, or if you use a later version of Groovy
        antlr-2.7.7.jar
        asm-3.2.jar
        groovy-1.7.5.jar
    -->
    <u:proxy id="web-proxy-3">
        <u:transport id="http-8281">
            <u:property name="ultra.transport.url" value="/vpathgroovy"/>
            <u:property name="ultra.http.strip_url_prefix" value="/vpathgroovy"/>
        </u:transport>
        <u:target>
            <u:inSequence>
                <!--Inline Groovy script-->
                <u:script language="groovy"><![CDATA[
                    println "Executing inline Groovy Script"

                    Map map = msg.getMessageProperty("ultra.http.query_param_map");
                    Object val = map.remove('x');
                    if (val != null) map.put('a', val);
                    val = map.remove('y');
                    if (val != null) map.put('b', val);
                    val = map.remove('z');
                    if (val != null) map.put('c', val);
                ]]></u:script>
            </u:inSequence>
            <u:inDestination>
                <u:address type="prefix">http://localhost:9000/service/HtmlServlet</u:address>
                <u:property name="ultra.endpoint.switch_location_headers_to" value="http://localhost:8280/vpath"/>
            </u:inDestination>
            <u:outSequence>
                <!--External Groovy script-->
                <u:scriptFile filename="samples/resources/test.groovy" language="groovy"/>
            </u:outSequence>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--A Proxy service that will accept any request over the http-8280 transport and forward them to the MIT website
    at http://web.mit.edu and replaces any response body URLs to point back to the proxy with a String replacement for
    demonstration purposes. When using this proxy, you could browse the MIT web site at http://localhost:8280 -->
    <!--<u:proxy id="web-proxy">
        <u:transport id="http-8280">
            <u:property name="ultra.transport.url" value="*"/>
        </u:transport>
        <u:target>
            <u:inDestination>
                <u:address type="prefix">http://web.mit.edu</u:address>
                <u:property name="ultra.endpoint.switch_location_headers_to" value="http://localhost:8280/"/>
            </u:inDestination>
            <u:outSequence>
                <u:java><![CDATA[
                    String original = mediation.readPayloadAsString(msg);
                    if (original != null) {
                        mediation.setPayloadFromString(msg, original.replaceAll("web.mit.edu", "localhost:8280"));
                    }
                ]]></u:java>
            </u:outSequence>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>-->

</beans>
