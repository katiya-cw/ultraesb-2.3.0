<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:u="http://www.adroitlogic.org/ultraesb"
       xmlns:s="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.adroitlogic.org/ultraesb http://schemas.ultraesb.org/ultraesb-2.0.xsd">

    <bean id="ultra-config" class="org.adroitlogic.ultraesb.core.ConfigurationImpl">
        <property name="environment">
            <bean class="org.adroitlogic.ultraesb.api.Environment">
                <constructor-arg name="name" value="sample"/>
            </bean>
        </property>
    </bean>

    <bean id="fileCache" class="org.adroitlogic.ultraesb.core.PooledMessageFileCache">
        <constructor-arg type="int" value="20"/>
    </bean>

    <bean id="http-8280" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8280"/>
    </bean>

    <bean id="http-sender" class="org.adroitlogic.ultraesb.transport.http.HttpNIOSender">
        <constructor-arg ref="fileCache"/>
    </bean>

    <bean id="poolExecutor" class="java.util.concurrent.ScheduledThreadPoolExecutor">
        <constructor-arg value="100"/>
    </bean>

    <u:proxy id="xml-scatter-gather">
        <u:transport id="http-8280"/>
        <u:target errorSequence="serviceErrorHandler">
            <u:inSequence onErrorInvoke="sequenceErrorHandler">
                <u:java><![CDATA[
                    mediation.getXMLSupport().splitWithBean("aggregator", msg);
                ]]></u:java>
            </u:inSequence>
            <u:outSequence onErrorInvoke="sequenceErrorHandler">
                <u:java><![CDATA[
                    mediation.getXMLSupport().retainElementAsPayload(msg, "//return");
                    mediation.getXMLSupport().aggregateWithBean("aggregator", msg);
                ]]></u:java>
            </u:outSequence>
        </u:target>
    </u:proxy>

    <bean name="aggregator" class="org.adroitlogic.ultraesb.core.helper.XMLSplitAggregator">
        <property name="splitXPath" value="/e:Envelope/e:Body/m:getQuote/request"/>
        <property name="splitNS">
            <map>
                <entry key="e" value="http://schemas.xmlsoap.org/soap/envelope/"/>
                <entry key="m" value="http://soap.services.samples/"/>
            </map>
        </property>
        <property name="splitSequence" value="seq-split"/>
        <property name="aggrXPath" value="/ns:getQuoteResponse"/>
        <property name="aggrSequence" value="seq-aggregated"/>
        <property name="aggrNS">
            <map>
                <entry key="ns" value="http://soap.services.samples/"/>
            </map>
        </property>
    </bean>

    <u:sequence id="seq-split">
        <u:java><![CDATA[
            mediation.getXMLSupport().wrapPayload(msg, "getQuote", "http://soap.services.samples/");
            mediation.getXMLSupport().convertDOMToSoap11(msg);
            mediation.sendToEndpoint(msg, "stockquote-service");
        ]]></u:java>
    </u:sequence>

    <u:sequence id="seq-aggregated">
        <u:java><![CDATA[
            msg.getMediation().getXMLSupport().convertDOMToSoap11(msg);
            mediation.sendResponse(msg, 200);
        ]]></u:java>
    </u:sequence>

    <u:sequence id="sequenceErrorHandler">
        <u:java><![CDATA[
            logger.debug("Failed Message : {}", mediation.readPayloadAsString(msg));
        ]]></u:java>
    </u:sequence>

    <u:sequence id="serviceErrorHandler">
        <u:java><![CDATA[
            mediation.getLogSupport().getServiceLogger().error("Service error handler called");
            mediation.setPayloadFromString(msg,"Generic service error : " + msg.getLastException().toString());
            mediation.sendResponseAndDrop(msg, 500);
        ]]></u:java>
    </u:sequence>

    <u:endpoint id="stockquote-service">
        <u:address>http://localhost:9000/service/SimpleStockQuoteService</u:address>
    </u:endpoint>

</beans>