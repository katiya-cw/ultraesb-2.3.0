<?xml version="1.0" encoding="UTF-8"?>
<!-- This sample shows the use of GZipped responses in various cases and message formats, used in GZipResponsesTest -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:u="http://www.adroitlogic.org/ultraesb"
       xmlns:s="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.adroitlogic.org/ultraesb http://schemas.ultraesb.org/ultraesb-2.0.xsd">

    <bean id="ultra-config" class="org.adroitlogic.ultraesb.core.ConfigurationImpl">
        <property name="environment">
            <bean class="org.adroitlogic.ultraesb.api.Environment">
                <constructor-arg name="name" value="sample"/>
            </bean>
        </property>
    </bean>

    <bean id="fileCache" class="org.adroitlogic.ultraesb.core.PooledMessageFileCache">
        <constructor-arg type="int" value="100"/>
    </bean>

    <bean id="http-8280" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8280"/>
        <property name="requestFilters">
            <list>
                <bean class="org.adroitlogic.ultraesb.transport.http.ServiceResourceRequestFilter">
                    <property name="resourcePrefix" value="http://localhost:8280"/>
                </bean>
            </list>
        </property>
        <!-- Make sure to GZip the response -->
        <property name="compressionMinSize" value="10"/>
    </bean>

    <bean id="http-sender" class="org.adroitlogic.ultraesb.transport.http.HttpNIOSender">
        <constructor-arg ref="fileCache"/>
    </bean>

    <bean id="https-sender" class="org.adroitlogic.ultraesb.transport.http.HttpsNIOSender">
        <constructor-arg ref="fileCache"/>
        <property name="nonProductionNoRemoteCertValidation" value="true"/>
        <property name="hostnameVerifier" value="AllowAll"/>
    </bean>

    <!-- Typical ws-sec proxy with message signing so that the gzip for responses for the signed message is accepted -->
    <u:proxy id="ws-sec-proxy">
        <u:transport id="http-8280">
            <u:property name="ultra.http.wsdl_url" value="file:samples/resources/SimpleStockQuoteService.wsdl"/>
        </u:transport>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                        try {
                            mediation.getWSSecurityManager().verifySignedMessage(msg, true);
                        } catch (Exception e) {
                            mediation.getSOAPSupport().setPayloadToSOAP11Fault(msg, "Client", "Security validation failed", "Couldn't validate the message signature");
                            mediation.sendResponse(msg, 500);
                        }
                    ]]></u:java>
            </u:inSequence>
            <u:inDestination>
                <u:address>http://localhost:9000/service/SimpleStockQuoteService</u:address>
            </u:inDestination>
            <u:outSequence>
                <u:java>
                    <![CDATA[
                        try {
                            mediation.getWSSecurityManager().signMessage(msg, "bob", null, "sha256");
                        } catch (Exception e) {
                            mediation.getSOAPSupport().setPayloadToSOAP11Fault(msg, "Server", "Internal Failure", "Couldn't sign the message");
                        }
                    ]]>
                </u:java>
            </u:outSequence>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!-- Converts the SOAP message into a JSON stream which should also be compressed with GZip provided that an
    Accept-Encoding header is present with content value gzip in it -->
    <u:proxy id="soap-json-proxy">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                    mediation.getJSONSupport().convertSOAPToJSONStream(msg);
                    mediation.sendResponse(msg, 200);
                ]]></u:java>
            </u:inSequence>
        </u:target>
    </u:proxy>

    <!-- Produces a raw JSONMessage to be zipped for responding to the caller -->
    <u:proxy id="json-proxy">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                        mediation.setPayloadFromString(msg, "{\"foo\":{\"test\":2,\"bar\":\"xx\"}}");
                        mediation.getJSONSupport().convertToJSONMessage(msg);
                        mediation.sendResponse(msg, 200);
                    ]]></u:java>
            </u:inSequence>
        </u:target>
    </u:proxy>

    <!-- Produces a text response that marginally exceeds the min zip size so that zipping be applied to the text -->
    <u:proxy id="text-proxy">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                        mediation.setPayloadFromString(msg, "Test message");
                        mediation.sendResponse(msg, 200);
                    ]]></u:java>
            </u:inSequence>
        </u:target>
    </u:proxy>

    <!-- Produces a text response of size below 10 (see the transport listener configuration for the min gzip size) so
    that the GZipping will not be applied even though the Accept-Encoding with gzip header is present -->
    <u:proxy id="no-zip-proxy">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                        mediation.setPayloadFromString(msg, "NoZip");
                        mediation.sendResponse(msg, 200);
                    ]]></u:java>
            </u:inSequence>
        </u:target>
    </u:proxy>

    <!-- Defines a proxy service that echos the request with WSSec signature attached to it, where tht response of this
     can be directly posted to the ws-sec-proxy for signature validation and GZipped responses -->
    <u:proxy id="echo-sec-proxy">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                        try {
                            mediation.getWSSecurityManager().signMessage(msg, "bob", null, "sha256");
                            mediation.sendResponse(msg, 200);
                        } catch (Exception e) {
                            mediation.getSOAPSupport().setPayloadToSOAP11Fault(msg, "Server", "Internal Failure", "Couldn't sign the message");
                            mediation.sendResponse(msg, 500);
                        }
                    ]]></u:java>
            </u:inSequence>
        </u:target>
    </u:proxy>

    <!--Defines the WSSecurityManager bean to use the WS-Security support of the UltraESB. This is initialized by
    passing the identity and trust keystores and passwords. The variation of the constructor used in this example
    is when both the identity and trust stores are one and the same. This sample keystore is the defacto keystore
    used in standard WS-Security samples for interoperability-->
    <bean id="wssecMgr" class="org.adroitlogic.soapbox.WSSecurityManager">
        <constructor-arg value="samples/conf/keys/ws-sec-keystore.jks"/>
        <constructor-arg value="password"/>
        <constructor-arg>
            <map>
                <entry key="alice" value="password"/>
                <entry key="bob" value="password"/>
            </map>
        </constructor-arg>
    </bean>

</beans>
