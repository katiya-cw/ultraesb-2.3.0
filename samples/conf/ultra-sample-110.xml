<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:u="http://www.adroitlogic.org/ultraesb"
       xmlns:s="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.adroitlogic.org/ultraesb http://schemas.ultraesb.org/ultraesb-2.0.xsd" default-destroy-method="destroy">

    <bean id="ultra-config" class="org.adroitlogic.ultraesb.core.ConfigurationImpl">
        <property name="environment">
            <bean class="org.adroitlogic.ultraesb.api.Environment">
                <constructor-arg name="name" value="sample"/>
            </bean>
        </property>
    </bean>

    <bean id="fileCache" class="org.adroitlogic.ultraesb.core.PooledMessageFileCache">
        <constructor-arg type="int" value="10"/>
    </bean>

    <!--Refer to the unit tests AuthenticationTest for more details about this sample and a unit test for it-->
    
    <!--Enforce Basic authentication on HTTP over port 8281-->
    <bean id="http-8281" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8281"/>
        <property name="requestFilters">
            <list>
                <bean class="org.adroitlogic.ultraesb.transport.http.auth.BasicAuthenticationFilter">
                    <property name="realmName" value="adroitlogic"/>
                    <property name="userDetailsService" ref="plain-user-service"/>
                </bean>
            </list>
        </property>
    </bean>

    <!--Enforce Digest authentication on HTTP over port 8282-->
    <bean id="http-8282" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8282"/>
        <property name="requestFilters">
            <list>
                <bean class="org.adroitlogic.ultraesb.transport.http.auth.DigestProcessingFilter">
                    <property name="realmName" value="adroitlogic"/>
                    <property name="userDetailsService" ref="plain-user-service"/>
                </bean>
            </list>
        </property>
    </bean>

    <!--Listen on HTTP over port 8280 without authentication-->
    <bean id="http-8280" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8280"/>
    </bean>

    <!-- Standard Spring security authenticaion provider definitions are used to enforce basic and digest authentication
    Usernames/Password used is asankha/adroitlogic -->
    <s:authentication-manager alias="authenticationManager">
    <s:authentication-provider>
        <!--<s:password-encoder hash="md5"/>
        <s:user-service>
            <s:user name="asankha" password="abac6d7582d9ab52c629f7490fd3eb2f" authorities="ROLE_ADMIN, ROLE_USER"/>
	    </s:user-service>-->
        <s:user-service id="plain-user-service">
            <s:user name="asankha" password="adroitlogic" authorities="ROLE_USER, ROLE_MANAGER"/>
        </s:user-service>
    </s:authentication-provider>
    </s:authentication-manager>

    <bean id="http-sender" class="org.adroitlogic.ultraesb.transport.http.HttpNIOSender">
        <constructor-arg ref="fileCache"/>
    </bean>

    <!--Expose proxy with Basic (8281) and Digest (8282) authentication, to respond with the validated username, role,
    HTTP method, URI and query parameters.
    Directly accessing a URL similar to http://localhost:8281/service/rest-mock or
    http://localhost:8282/service/rest-mock with a browser will demonstrate this service-->
    <u:proxy id="rest-mock">
        <u:transport id="http-8281"/>
        <u:transport id="http-8282"/>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                    System.out.println("User is : " + mediation.getHTTPSupport().getAuthenticatedUsername(msg));
                    System.out.println("Roles are : " + mediation.getHTTPSupport().getAuthenticatedRolesString(msg));
                    Message res = msg.createDefaultResponseMessage();
                    mediation.setPayloadFromString(res,
                        "<response>" +
                        "<user>" + mediation.getHTTPSupport().getAuthenticatedUsername(msg) + "</user>" +
                        "<roles>" + mediation.getHTTPSupport().getAuthenticatedRolesString(msg) + "</roles>" +
                        "<method>" + mediation.getHTTPSupport().getMethod(msg) + "</method>" +
                        "<uri>" + msg.getDestinationURL() + "</uri>" +
                        "<query>" + mediation.getHTTPSupport().getRequestParameterMap(msg) + "</query>" +
                        "</response>");
                    mediation.sendResponse(res, 200);
                ]]></u:java>
            </u:inSequence>
        </u:target>
    </u:proxy>

    <!--Defines a Proxy over unauthenticated HTTP port 8280, to perform pre-emptive HTTP Basic authentication to the
    Proxy service rest-mock (defined above) using hard coded credentials.

    Thus requesting a URL similar to http://localhost:8280/service/preemptive-basic-auth-proxy-1 will not request for
    authentication, but perform it through this proxy service pre-emptively-->
    <u:proxy id="preemptive-basic-auth-proxy-1">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                    mediation.getHTTPSupport().addPreemptiveBasicAuthentication(msg, "asankha", "adroitlogic");
                ]]></u:java>
            </u:inSequence>
            <u:inDestination>
                <u:address>http://localhost:8281/service/rest-mock</u:address>
            </u:inDestination>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--Defines a Proxy over unauthenticated HTTP port 8280, to perform pre-emptive HTTP Basic authentication to the
    Proxy service rest-mock (defined above) using hard coded credentials - specified as Endpoint properties
    'ultra.http.auth_username' and 'ultra.http.auth_password'. This is an alternative to the preemptive-basic-auth-proxy-1
     proxy defined above, and is the preferred approach as it allows basic/digest or AWS S3 authentication etc to be
     selected with the property 'ultra.http.auth_scheme' when requesting the endpoint

    Thus requesting a URL similar to http://localhost:8280/service/preemptive-basic-auth-proxy-1 will not request for
    authentication, but perform it through this proxy service pre-emptively-->
    <u:proxy id="preemptive-basic-auth-proxy-2">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inDestination>
                <u:address>http://localhost:8281/service/rest-mock</u:address>
                <u:property name="ultra.http.auth_username" value="asankha"/>
                <u:property name="ultra.http.auth_password" value="adroitlogic"/>
                <u:property name="ultra.http.auth_scheme" value="basic"/>
            </u:inDestination>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--Defines a Proxy over unauthenticated HTTP port 8280, to perform pre-emptive Amazon AWS S3 authentication to the
    S3 bucket http://downloads.adroitlogic.com.s3.amazonaws.com. This allows HTTP PUT, GET, DELETE etc to upload, fetch
    or remove resources from the Amazon S3 bucket, with authentication performed by the UltraESB

    Thus requesting a URL similar to http://localhost:8280/service/s3-auth-proxy/test.txt will upload a file 'test.txt'
    to Amazon S3, while a GET on the same URL will fetch it, and a DELETE will remove it.

    See the source for the unit test AuthenticationTest for more details.
    Note: the AWS key and secret key are read as environment variables to prevent these from leaking with this sample.
    To test this sample, you should replace these appropriately, or hard code them as the 'ultra.http.auth_username' and
    'ultra.http.auth_password' below, and also switch the Amazon S3 bucket URL appropriately-->
    <u:proxy id="s3-auth-proxy">
        <u:transport id="http-8280">
            <u:property name="ultra.transport.url" value="s3-auth-proxy*"/>
        </u:transport>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                        // read AWS S3 AccessKey and SecretKey from an environment variables
                        String s3Username = System.getenv().get("AWS_S3_USERNAME");
                        String s3Password = System.getenv().get("AWS_S3_PASSWORD");
                        System.out.println("Using AWS Key : " + s3Username);
                        System.out.println("Using AWS Secret Key : XX{ MASKED }XX");
                        mediation.getHTTPSupport().setAuthenticationCredentials(msg, s3Username, s3Password);
                    ]]></u:java>
            </u:inSequence>
            <u:inDestination>
                <u:address type="prefix">http://downloads.adroitlogic.com.s3.amazonaws.com</u:address>
                <u:property name="ultra.http.auth_scheme" value="aws.s3"/>
            </u:inDestination>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--Defines a Proxy over unauthenticated HTTP port 8280, to perform non-preemptive HTTP Basic authentication to the
    Proxy service rest-mock (defined above) using hard coded credentials. Note that this will result in an initial
    request to which a HTTP 401 authentication response would be issued by the endpoint. The UltraESB then
    performs dynamic authentication, and re-issues the request.

    Thus requesting a URL similar to http://localhost:8280/service/basic-auth-proxy will not request for
    authentication, but perform it through this proxy service non-preemptively-->
    <u:proxy id="basic-auth-proxy">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                    mediation.getHTTPSupport().setAuthenticationCredentials(msg, "asankha", "adroitlogic");
                ]]></u:java>
            </u:inSequence>
            <u:inDestination>
                <u:address>http://localhost:8281/service/rest-mock</u:address>
            </u:inDestination>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--Defines a Proxy over unauthenticated HTTP port 8280, to perform non-preemptive HTTP Basic authentication to the
    Proxy service rest-mock (defined above) using hard coded credentials that are invalid. Note that this will result
    in an initial request to which a HTTP 401 authentication response would be issued by the endpoint. The UltraESB then
    performs dynamic authentication, and re-issues the request that again fails due to bad credentials. This response
    would then be returned as-is to the client - and if the user performs correct authentication, a subsequent request
    will succeed

    Thus requesting a URL similar to http://localhost:8280/service/basic-auth-proxy-wrong will attempt non-preemptive
    authentication, and on failing, forward the response back to the client for end-user authentication-->
    <u:proxy id="basic-auth-proxy-wrong">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                    mediation.getHTTPSupport().setAuthenticationCredentials(msg, "asankha", "wrong");
                ]]></u:java>
            </u:inSequence>
            <u:inDestination>
                <u:address>http://localhost:8281/service/rest-mock</u:address>
            </u:inDestination>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--Defines a Proxy over unauthenticated HTTP port 8280, to perform non-preemptive HTTP Digest authentication to the
    Proxy service rest-mock (defined above) using hard coded credentials. Note that this will result in an initial
    request to which a HTTP 401 authentication response would be issued by the endpoint. The UltraESB then
    performs dynamic authentication to the challenge presented, and re-issues the request.

    Thus requesting a URL similar to http://localhost:8280/service/digest-auth-proxy will not request for
    authentication, but perform it through this proxy service transparently-->
    <u:proxy id="digest-auth-proxy">
        <u:transport id="http-8280"/>
        <u:target>
            <!--<u:inSequence>
                <u:java><![CDATA[
                    mediation.getHTTPSupport().setAuthenticationCredentials(msg, "asankha", "adroitlogic");
                ]]></u:java>
            </u:inSequence>-->
            <u:inDestination>
                <u:address>http://localhost:8282/service/rest-mock</u:address>
                <u:property name="ultra.http.auth_username" value="asankha"/>
                <u:property name="ultra.http.auth_password" value="adroitlogic"/>
            </u:inDestination>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--Defines a Proxy over unauthenticated HTTP port 8280, to perform non-preemptive HTTP Digest authentication to the
    Proxy service rest-mock (defined above) using hard coded credentials that are invalid. Note that this will result
    in an initial request to which a HTTP 401 authentication response would be issued by the endpoint. The UltraESB then
    performs dynamic authentication to the challenge presented, and re-issues the request that again fails due to
    bad credentials. This response would then be returned as-is to the client - and if the user performs correct
    authentication, a subsequent request will succeed

    Thus requesting a URL similar to http://localhost:8280/service/digest-auth-proxy-wrong will attempt non-preemptive
    authentication, and on failing, forward the response back to the client for end-user authentication-->
    <u:proxy id="digest-auth-proxy-wrong">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                    mediation.getHTTPSupport().setAuthenticationCredentials(msg, "asankha", "wrong");
                ]]></u:java>
            </u:inSequence>
            <u:inDestination>
                <u:address>http://localhost:8282/service/rest-mock</u:address>
            </u:inDestination>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <u:proxy id="ntlm-auth-proxy">
        <u:transport id="http-8280"/>
        <u:target>
            <u:inSequence>
                <u:java import="org.adroitlogic.ultraesb.api.transport.http.HttpConstants;"><![CDATA[
                    mediation.getHTTPSupport().setNTLMAuthenticationCredentials(msg, "administrator", "RhU2Xfwcmew", "WORKGROUP", null);
                ]]></u:java>
            </u:inSequence>
            <u:inDestination>
                <u:address>http://ec2-184-73-124-76.compute-1.amazonaws.com/test.asmx</u:address>
            </u:inDestination>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

</beans>
