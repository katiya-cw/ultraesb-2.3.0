<?xml version="1.0" encoding="UTF-8"?>
<!--This configuration is used in Performance Testing of the UltraESB-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:u="http://www.adroitlogic.org/ultraesb"
xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.adroitlogic.org/ultraesb http://schemas.ultraesb.org/ultraesb-2.0.xsd">

    <bean id="ultra-config" class="org.adroitlogic.ultraesb.core.ConfigurationImpl">
        <property name="defaultWorkManager">
            <bean id="default-wm" class="org.adroitlogic.ultraesb.core.work.SimpleQueueWorkManager">
                <constructor-arg ref="ultra-config"/>
                <property name="primaryCoreThreads" value="40"/>
                <property name="primaryMaxThreads" value="290"/>
                <property name="primaryKeepaliveSeconds" value="5"/>
                <property name="primaryQueueSize" value="0"/>
                <property name="secondaryCoreThreads" value="1"/>
                <property name="secondaryMaxThreads" value="10"/>
                <property name="secondaryKeepaliveSeconds" value="5"/>
                <property name="secondaryQueueSize" value="-1"/>
            </bean>
        </property>
        <property name="environment">
            <bean class="org.adroitlogic.ultraesb.api.Environment">
                <constructor-arg name="name" value="prod"/>
                <property name="deploymentUnitsEnabled" value="false"/>
            </bean>
        </property>
    </bean>

    <bean id="metrics-engine" class="org.adroitlogic.metrics.core.MetricsEngineImpl">
        <constructor-arg name="tuner">
            <bean class="org.adroitlogic.metrics.api.MetricsEngineTuner">
                <constructor-arg type="boolean" name="turnedOff" value="true"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- The enhanced RAMDisk based file cache-->
    <bean id="fileCache" class="org.adroitlogic.ultraesb.core.RAMDiskFileCache">
        <constructor-arg value="/tmp/ram"/>               <!--ram disk path-->
        <constructor-arg value="5120" type="int"/>        <!--initial size-->
    </bean>

    <bean id="http-8280" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8280"/>
        <property name="zeroCopyEnabled" value="true"/>
        <property name="requestFilters">
            <list>
                <bean class="org.adroitlogic.ultraesb.transport.http.ServiceResourceRequestFilter">
                    <property name="resourcePrefix" value="http://localhost:8280"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean id="http-sender" class="org.adroitlogic.ultraesb.transport.http.HttpNIOSender">
        <constructor-arg ref="fileCache"/>
        <property name="zeroCopyEnabled" value="true"/>
    </bean>

    <!--=================================================================-->
    <!--The Performance Test Scenario specific configuration and services-->
    <!--=================================================================-->

    <!--The test endpoint used to make requests and receive an echo back-->
    <u:endpoint id="RealService" type="fail-over">
        <u:address>http://localhost:9000/service/EchoService</u:address>
        <u:address>http://localhost:9000/service/EchoService</u:address>
        <u:address>http://localhost:9000/service/EchoService</u:address>
        <u:temporaryFailures>
            <u:gracePeriod>1000</u:gracePeriod>
        </u:temporaryFailures>
        <u:suspendOnFailure>
            <u:initialDuration>1000</u:initialDuration>
            <u:progressionFactor>1</u:progressionFactor>
            <u:maximumDuration>1000</u:maximumDuration>
        </u:suspendOnFailure>
    </u:endpoint>

    <!--A Direct and simple proxy service with a custom error sequence that hides the actual cause from the client-->
    <u:proxy id="DirectProxy">
        <u:transport id="http-8280">
            <u:property name="ultra.http.wsdl_url" value="file:samples/resources/perf/ProxyWSDL-embedded.wsdl"/>
        </u:transport>
        <u:target inDestination="RealService">
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
            <u:errorSequence>
                <u:java><![CDATA[
                    mediation.getSOAPSupport().setPayloadToSOAP11Fault(msg, null, "Error", null);
                    mediation.sendResponse(msg, 500);
                ]]></u:java>
            </u:errorSequence>
        </u:target>
    </u:proxy>

    <!--A content based routing proxy that only forwards orders where the first symbol is for 'IBM'-->
    <u:proxy id="CBRProxy">
        <u:transport id="http-8280">
            <u:property name="ultra.http.wsdl_url" value="file:samples/resources/perf/ProxyWSDL-embedded.wsdl"/>
        </u:transport>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                    if (mediation.getXMLSupport().filter(msg, "//order[1]/symbol", "IBM")) {
                        mediation.sendToEndpoint(msg, "RealService");
                    } else {
                        mediation.getSOAPSupport().setPayloadToSOAP11Fault(msg, null, "First order must be for the symbol IBM", null);
                        mediation.sendResponse(msg, 500);
                    }
                ]]></u:java>
            </u:inSequence>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--A content based routing proxy that filters on a SOAP header-->
    <u:proxy id="CBRSOAPHeaderProxy">
        <u:transport id="http-8280">
            <u:property name="ultra.http.wsdl_url" value="file:samples/resources/perf/ProxyWSDL-embedded.wsdl"/>
        </u:transport>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                    if ("xadmin;server1;community#1.0##".equals(
                            mediation.getSOAPSupport().getSoapHeaderAsString(msg, "http://someuri", "routing"))) {
                        mediation.sendToEndpoint(msg, "RealService");
                    } else {
                        mediation.getSOAPSupport().setPayloadToSOAP11Fault(msg, null, "Invalid routing header", null);
                        mediation.sendResponse(msg, 500);
                    }
                ]]></u:java>
            </u:inSequence>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--A content based routing proxy that filters on a transport header-->
    <u:proxy id="CBRTransportHeaderProxy">
        <u:transport id="http-8280">
            <u:property name="ultra.http.wsdl_url" value="file:samples/resources/perf/ProxyWSDL-embedded.wsdl"/>
        </u:transport>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                    if ("xadmin;server1;community#1.0##".equals(msg.getFirstTransportHeader("routing"))) {
                        mediation.sendToEndpoint(msg, "RealService");
                    } else {
                        mediation.getSOAPSupport().setPayloadToSOAP11Fault(msg, null, "Invalid routing header", null);
                        mediation.sendResponse(msg, 500);
                    }
                ]]></u:java>
            </u:inSequence>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--A Proxy service performing XSLT transformation of the request and response-->
    <u:proxy id="XSLTProxy">
        <u:transport id="http-8280">
            <u:property name="ultra.http.wsdl_url" value="file:samples/resources/perf/ProxyWSDL-embedded.wsdl"/>
        </u:transport>
        <u:target inDestination="RealService">
            <u:inSequence>
                <u:java><![CDATA[
                    mediation.getXMLSupport().transform(msg, "samples/resources/perf/transform_env_reverse.xslt", null);
                ]]></u:java>
            </u:inSequence>
            <u:outSequence>
                <u:java><![CDATA[
                    mediation.getXMLSupport().transform(msg, "samples/resources/perf/transform_env.xslt", null);
                ]]></u:java>
            </u:outSequence>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--The WS-Security Proxy service that validates a request and forwards valid requests to the backend-->
    <u:proxy id="SecureProxy">
        <u:transport id="http-8280">
            <u:property name="ultra.http.wsdl_url" value="file:samples/resources/perf/ProxyWSDL-embedded.wsdl"/>
        </u:transport>
        <u:target inDestination="RealService">
            <u:inSequence>
                <u:java import="org.adroitlogic.soapbox.api.*;"><![CDATA[
                try {
                    WSSecurityManager wssecMgr = mediation.getSpringBean("wssecMgr", WSSecurityManager.class);
                    wssecMgr.verifyTimestampedEncryptedAndSignedMessage(msg, true);
                } catch (Exception e) {
                    mediation.getSOAPSupport().setPayloadToSOAP11Fault(msg, null, "Security validation failed : " + e.getMessage(), null);
                    mediation.sendResponse(msg, 500);
                }
                ]]></u:java>
            </u:inSequence>
            <u:outSequence>
                <u:java import="org.adroitlogic.soapbox.api.*;"><![CDATA[
                    WSSecurityManager wssecMgr = mediation.getSpringBean("wssecMgr", WSSecurityManager.class);
                    wssecMgr.timestampSignAndEncryptMessage(msg, "bob", "alice");
                ]]></u:java>
            </u:outSequence>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--Definition and initialization of the WS-Security support and keystores-->
    <bean id="wssecMgr" class="org.adroitlogic.soapbox.WSSecurityManager">
        <!--The identity keystore and trust keystore are the same store.jks -->
        <constructor-arg value="samples/resources/perf/store.jks"/>
        <constructor-arg value="password"/>
        <constructor-arg>
            <map>
                <entry key="alice" value="password"/>
                <entry key="bob" value="password"/>
            </map>
        </constructor-arg>
    </bean>

    <!--JMX management and monitoring configuration
    Uncomment and configure JMX access as required for remote JMX connections.
    This is a standard Spring framework bean - thus refer to the Spring documentation for specifics and examples-->
    <bean id="serverConnector" class="org.springframework.jmx.support.ConnectorServerFactoryBean" depends-on="registry">
        <property name="objectName" value="connector:name=iiop"/>
        <!-- Remember to edit bin/ultraesb.sh or conf/wrapper.conf to specify the -Djava.rmi.server.hostname=<your-ip-address> property for JMX -->
        <property name="serviceUrl" value="service:jmx:rmi://localhost:9994/jndi/rmi://localhost:1099/ultra"/>
        <property name="threaded" value="true"/>
        <property name="daemon" value="true"/>
    </bean>
    <bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
        <property name="port" value="1099"/>
    </bean>

</beans>
