<?xml version="1.0" encoding="UTF-8"?>
<!--suppress SpringBeanNameConventionInspection, UnparsedCustomBeanInspection -->
<!-- This sample demonstrates the Frequency throttle automatic rebalancing in a cluster -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:u="http://www.adroitlogic.org/ultraesb"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd

http://www.adroitlogic.org/ultraesb http://schemas.ultraesb.org/ultraesb-2.0.xsd">

    <bean id="ultra-config" class="org.adroitlogic.ultraesb.core.ConfigurationImpl">
        <property name="environment">
            <bean class="org.adroitlogic.ultraesb.api.Environment">
                <constructor-arg name="name" value="sample"/>
            </bean>
        </property>
    </bean>

    <bean id="fileCache" class="org.adroitlogic.ultraesb.core.PooledMessageFileCache">
        <constructor-arg type="int" value="10"/>
    </bean>

    <bean id="http-8280" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8280"/>
    </bean>

    <bean id="http-sender" class="org.adroitlogic.ultraesb.transport.http.HttpNIOSender">
        <constructor-arg ref="fileCache"/>
    </bean>

    <bean id="cluster-manager" class="org.adroitlogic.ultraesb.clustering.ClusterManager">
        <constructor-arg value="true" type="boolean"/>
        <property name="zkConnectString" value="127.0.0.1:2181"/>
        <property name="zkSessionTimeout" value="30"/>
        <property name="domain" value="default"/>
        <property name="nodeName" value="node1"/>
        <property name="startupTimeout" value="30"/>
        <property name="upTimeReportInterval" value="60"/>
        <!--<property name="failoverProcessor" ref="failover-processor"/>-->
    </bean>

    <bean id="cache-manager" class="org.adroitlogic.ultraesb.cache.ehcache.EhCacheManager">
        <property name="ehCacheConfig" value="conf/ehcache.xml"/>
    </bean>

    <bean id="throttle" class="org.adroitlogic.ultraesb.core.mediation.throttle.RebalancingFrequencyThrottle" depends-on="cluster-manager">
        <property name="clusterManager" ref="cluster-manager"/>
        <property name="rebalanceDelay" value="10000"/>
        <property name="initialNodeCount" value="2"/>
        <property name="clusterLockTTL" value="60000"/>
        <property name="rebalanceRules">
            <map>
                <entry key="bronze" value="50,120,25,2000,5"/> <!--averageThroughput=50, systemThrottle=120, nodeOutagePercentage=25, duration=2seconds, blocks=5-->
                <entry key="silver" value="80,150,50,2000,5"/> <!--averageThroughput=80, systemThrottle=150, nodeOutagePercentage=50, duration=2seconds, blocks=5-->
            </map>
        </property>
    </bean>

    <u:proxy id="counter">
        <u:transport id="http-8280">
            <u:property name="ultra.transport.url" value="counter*"/>
        </u:transport>
        <u:target>
            <u:inSequence>
                <u:java import="org.adroitlogic.ultraesb.api.mediation.ThrottleSupport; org.adroitlogic.ultraesb.api.cache.Cache;"><![CDATA[
                        ThrottleSupport throttle = mediation.getThrottleSupport("throttle");
                        Cache cache = mediation.getCachingSupport().getLocalPermanentCache();
                        int counter = 0;
                        synchronized (this) {
                            String counterKey = "sample-counter";
                            if (cache.get(counterKey) != null) {
                                counter = Integer.valueOf(cache.get(counterKey).toString());
                            }
                            counter++;
                            cache.put(counterKey, String.valueOf(counter));
                        }
                        Message res = msg.createDefaultResponseMessage();
                        if (throttle.isAllowed(msg)) {
                            mediation.setPayloadFromString(res, "Success : count " + String.valueOf(counter));
                            mediation.sendResponse(res, 200);
                        } else {
                            mediation.setPayloadFromString(res, "Failure : count " + String.valueOf(counter));
                            mediation.sendResponse(res, 500);
                        }
                    ]]></u:java>
            </u:inSequence>
        </u:target>
    </u:proxy>

</beans>