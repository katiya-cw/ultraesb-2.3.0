<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:u="http://www.adroitlogic.org/ultraesb"
       xmlns:s="http://www.springframework.org/schema/security"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
http://www.adroitlogic.org/ultraesb http://schemas.ultraesb.org/ultraesb-2.0.xsd" default-destroy-method="destroy">

    <bean id="ultra-config" class="org.adroitlogic.ultraesb.core.ConfigurationImpl">
        <property name="environment">
            <bean class="org.adroitlogic.ultraesb.api.Environment">
                <constructor-arg name="name" value="sample"/>
            </bean>
        </property>
    </bean>

    <bean id="fileCache" class="org.adroitlogic.ultraesb.core.PooledMessageFileCache">
        <constructor-arg type="int" value="10"/>
    </bean>

    <bean id="http-8280" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8280"/>
    </bean>

    <bean id="http-sender" class="org.adroitlogic.ultraesb.transport.http.HttpNIOSender">
        <constructor-arg ref="fileCache"/>
    </bean>

    <!--Defines a proxy service that can perform sticky session load balancing between multiple Tomcat instances, and
    fail-over a request to another on failure. The JVM Route defined by the Tomcat instances are read from a request
    Cookie JSESSIONID or a path segment jsessionid to perform stick load balancing and route the request accordingly

    The proxy forwards a stick request to the fail-over endpoints tc1-failover or tc2-failover depending on the
    current sticky instance. A new request uses the round-robin-loadbalance endpoint that selects a node using the
    round robin algorithm. The UltraESB supports other algorithms such as weighted & random

    See http://adroitlogic.org/samples-articles-and-tutorials/15/58 for a complete description of this example-->
    <u:proxy id="web-proxy">
        <u:transport id="http-8280">
            <u:property name="ultra.transport.url" value="*"/>
        </u:transport>
        <u:target>
            <u:inSequence>
                <u:java><![CDATA[
                    String jvmRoute = mediation.getHTTPSupport().getJvmRoute(msg);
                    logger.debug("JVM Route : {}", jvmRoute);
                    if ("tomcat1".equals(jvmRoute)) {
                        mediation.sendToEndpoint(msg, "tc1-failover");
                    } else if ("tomcat2".equals(jvmRoute)) {
                        mediation.sendToEndpoint(msg, "tc2-failover");
                    } else {
                        mediation.sendToEndpoint(msg, "round-robin-loadbalance");
                    }
                ]]></u:java>
            </u:inSequence>
            <u:outDestination>
                <u:address type="response"/>
            </u:outDestination>
        </u:target>
    </u:proxy>

    <!--Always forwards to http://localhost:8080 and if the endpoint fails, forwards to http://localhost:8081  -->
    <u:endpoint id="tc1-failover" type="fail-over">
        <u:address type="prefix">http://localhost:8080</u:address>
        <u:address type="prefix">http://localhost:8081</u:address>
        <u:property name="ultra.endpoint.switch_location_headers_to" value="http://localhost:8280/"/>
    </u:endpoint>

    <!--Always forwards to http://localhost:8081 and if the endpoint fails, forwards to http://localhost:8080  -->
    <u:endpoint id="tc2-failover" type="fail-over">
        <u:address type="prefix">http://localhost:8081</u:address>
        <u:address type="prefix">http://localhost:8080</u:address>
        <u:property name="ultra.endpoint.switch_location_headers_to" value="http://localhost:8280/"/>
    </u:endpoint>

    <!--Forwards to either http://localhost:8080 or http://localhost:8081 using a round-robin policy -->
    <u:endpoint id="round-robin-loadbalance" type="round-robin-with-fail-over">
        <u:address type="prefix">http://localhost:8081</u:address>
        <u:address type="prefix">http://localhost:8080</u:address>
        <u:property name="ultra.endpoint.switch_location_headers_to" value="http://localhost:8280/"/>
    </u:endpoint>

</beans>
