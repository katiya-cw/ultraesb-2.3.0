<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:u="http://www.adroitlogic.org/ultraesb"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.adroitlogic.org/ultraesb http://schemas.ultraesb.org/ultraesb-2.0.xsd">

    <bean id="ultra-config" class="org.adroitlogic.ultraesb.core.ConfigurationImpl">
        <property name="environment">
            <bean class="org.adroitlogic.ultraesb.api.Environment">
                <constructor-arg name="name" value="sample"/>
            </bean>
        </property>
    </bean>

    <bean id="fileCache" class="org.adroitlogic.ultraesb.core.PooledMessageFileCache">
        <constructor-arg type="int" value="10"/>
    </bean>

    <bean id="http-8280" class="org.adroitlogic.ultraesb.transport.http.HttpNIOListener">
        <constructor-arg ref="fileCache"/>
        <property name="port" value="8280"/>
    </bean>

    <bean id="http-sender" class="org.adroitlogic.ultraesb.transport.http.HttpNIOSender">
        <constructor-arg ref="fileCache"/>
    </bean>

    <!--A simple mock REST service that responds to GET, POST, PUT and DELETE methods. The GET responses are picked up
    from static files and the POST emulates a resource creation with a HTTP 201 Created. PUT and DELETE operations
    simply return a HTTP 204 No Content response-->
    <u:proxy id="rest-mock">
        <u:transport id="http-8280">
            <u:property name="ultra.transport.url" value="rest-mock*"/>
        </u:transport>
        <u:target>
            <u:inSequence>
                <u:java import="org.adroitlogic.ultraesb.api.transport.http.HttpConstants;"><![CDATA[
                        Message res = null;
                        switch (mediation.getHTTPSupport().getMethod(msg)) {
                            case GET:
                                res = msg.createDefaultResponseMessage();
                                if (msg.getDestinationURL().endsWith("customers/1")) {
                                    mediation.setPayloadFromFile(res, "samples/resources/mock-response-1.xml");
                                } else if (msg.getDestinationURL().endsWith("customers/2")) {
                                    mediation.setPayloadFromFile(res, "samples/resources/mock-response-2.xml");
                                } else {
                                    mediation.setPayloadFromFile(res, "samples/resources/mock-response-3.xml");
                                }
                                mediation.sendResponse(res, 200);
                                break;
                            case POST:
                                res = msg.createDefaultResponseMessage();
                                res.addTransportHeader(HttpConstants.Headers.LOCATION, "http://localhost:8280/service/rest-mock/customers/1");
                                mediation.sendResponse(res, 201);
                                break;
                            case PUT:
                                res = msg.createDefaultResponseMessage();
                                mediation.sendResponse(res, 204);
                                break;
                            case DELETE:
                                res = msg.createDefaultResponseMessage();
                                mediation.sendResponse(res, 204);
                                break;
                            default:
                                res = msg.createDefaultResponseMessage();
                                mediation.sendResponse(res, 500);
                                break;
                        }
                    ]]></u:java>
            </u:inSequence>
        </u:target>
    </u:proxy>

</beans>
